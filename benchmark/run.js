var ABIs = require('./ABIs');
var myArgs = process.argv.slice(2);

var KVStoreABI = ABIs.KVStore;

var fromAddress = "0x933e73c3f959759c169effa4019c8faf7d05ce33"

var endpoint = myArgs[0];
var contractType = myArgs[1];
var deployTime = myArgs[2];
var txRate = myArgs[3];
var txLimit = myArgs[4];

var txs0 = [] //Tuple<Hash, time> add when received
var txs1 = [] //Tuple<Hash, time> add when mined

let txCount = 0;
let start = 0;
let finish = 0;

var Web3 = require('web3');
var web3 = new Web3("http://" + endpoint);

if (!web3) {
    console.log("Issue connecting to web3 provider at " + endpoint);
} else {
    console.log("Connected web3 provider at " + endpoint);
}

switch (contractType) {
    case "KVStore":
        var byteCode = "0x608060405234801561001057600080fd5b50610724806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063131a068014610046578063693ec85e1461017a578063e942b516146102ae575b600080fd5b6100ff6004803603602081101561005c57600080fd5b810190808035906020019064010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610400565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013f578082015181840152602081019050610124565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102336004803603602081101561019057600080fd5b81019080803590602001906401000000008111156101ad57600080fd5b8201836020820111156101bf57600080fd5b803590602001918460018302840111640100000000831117156101e157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506104c6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610273578082015181840152602081019050610258565b50505050905090810190601f1680156102a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103fe600480360360408110156102c457600080fd5b81019080803590602001906401000000008111156102e157600080fd5b8201836020820111156102f357600080fd5b8035906020019184600183028401116401000000008311171561031557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561037857600080fd5b82018360208201111561038a57600080fd5b803590602001918460018302840111640100000000831117156103ac57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506105d1565b005b6000818051602081018201805184825260208301602085012081835280955050505050506000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104be5780601f10610493576101008083540402835291602001916104be565b820191906000526020600020905b8154815290600101906020018083116104a157829003601f168201915b505050505081565b60606000826040518082805190602001908083835b602083106104fe57805182526020820191506020810190506020830392506104db565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105c55780601f1061059a576101008083540402835291602001916105c5565b820191906000526020600020905b8154815290600101906020018083116105a857829003601f168201915b50505050509050919050565b806000836040518082805190602001908083835b6020831061060857805182526020820191506020810190506020830392506105e5565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020908051906020019061064e929190610653565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061069457805160ff19168380011785556106c2565b828001600101855582156106c2579182015b828111156106c15782518255916020019190600101906106a6565b5b5090506106cf91906106d3565b5090565b6106f591905b808211156106f15760008160009055506001016106d9565b5090565b9056fea165627a7a72305820e7d11500e69bd595882403ff0d0ce31025f32cfe8dfc0a2b1247acc93ddf298b0029";
        break;
    case "Other":
        // code block
        break;
    default:
        console.log("\nERROR: Contract Type not specified!!!!\n");
}

console.log("Deploying smart contract");
web3.eth.sendTransaction({ "from": "0x933e73c3f959759c169effa4019c8faf7d05ce33", "data": byteCode })
    .once('transactionHash', function (hash) { console.log("TX HASH:\n", hash) })
    .once('receipt', function (receipt) { console.log("RECEIPT:\n", receipt) })
    .on('confirmation', function (confNumber, receipt) { /*DO NOTHING*/ })
    .on('error', function (error) { console.log("ERROR\n:", error) })
    .then(function (receipt) {
        // will be fired once the receipt is mined
        console.log("Contract at:", receipt.contractAddress)
        contractAddress = receipt.contractAddress;
    });

function sendTransaction() {
    if (start == 0) {
        start = Date.now();
    }
    tx.send({ from: fromAddress })
        .once('transactionHash', function (hash) {
            // console.log("TX RECEIVED:", hash)
            txs0.push({ txHash: hash, time: Date.now() });
        })
        .on('error', function (error) { console.log("ERROR\n:", error) })
        .then(function (receipt) {
            // console.log("TX MINED:", receipt.transactionHash)
            txs1.push({ txHash: receipt.transactionHash, time: Date.now() });
            if (txCount == txLimit) {
                finish = Date.now();
            }
        });
}

async function evaluate() {
    while (txs1.length < txLimit) {
        await sleep(1000);
    }

    let totalLatency = 0;
    console.log("\nAnalyzing the data....", txs0.length + "txs tracked.\n");
    for (let i = 0; i < txs0.length; i++) {
        totalLatency += txs1[i].time - txs0[i].time;
    }

    if (txCount != txLimit) {
        console.log("\n\n", "SOMETHING WENT REALLY WRONG!", "\n\n");
    }
    console.log("\nDURATION:", finish - start, "\n");
    console.log("\nAVG. TPS:", txCount / ((finish - start) / 1000), "\n");
    console.log("\nAVG. LATENCY:", totalLatency / txs0.length, "\n");
}

function setIntervalX(callback, delay, repetitions) {
    var intervalID = setInterval(function () {

        callback();

        // console.log(txCount + 1 + " of " + repetitions);
        if (++txCount == repetitions) {
            console.log("\nALL TXS SENT - Waiting for mining process to finish!\n");
            clearInterval(intervalID);
        }
    }, delay);
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function loop() {
    await sleep(deployTime * 1000);

    contract = new web3.eth.Contract(KVStoreABI);
    contract.options.address = contractAddress;
    tx = contract.methods.set("hello", "world");

    console.log("\nSending ", txLimit + "txs...\n");
    setIntervalX(function () {
        sendTransaction();
    }, 1000 / txRate, txLimit);
    setTimeout(function () {
        evaluate();
    }, (1000 / txRate) * txLimit);
}

loop();